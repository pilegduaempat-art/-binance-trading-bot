# 📁 Project Structure

Complete file structure and organization for the Binance Trading Bot.

## 🗂️ Directory Layout

```
binance-trading-bot/
│
├── 📄 app.py                      # Main application entry point
├── 📄 config.py                   # Configuration and constants
├── 📄 requirements.txt            # Python dependencies
│
├── 📄 exchange.py                 # Exchange connection module
├── 📄 indicators.py               # Technical indicators module
├── 📄 signals.py                  # Signal generation module
├── 📄 ml_engine.py                # Machine learning module
├── 📄 trading.py                  # Trading execution module
├── 📄 backtest.py                 # Backtesting engine module
├── 📄 notifications.py            # Notifications module
├── 📄 visualization.py            # Charts and visualization module
├── 📄 utils.py                    # Utility functions module
│
├── 📁 tabs/                       # Tab modules directory
│   ├── 📄 __init__.py            # Package initialization
│   ├── 📄 backtest_tab.py        # Backtest tab interface
│   ├── 📄 portfolio_tab.py       # Portfolio tab interface
│   └── 📄 analytics_tab.py       # Analytics tab interface
│
├── 📄 .gitignore                  # Git ignore rules
├── 📄 README.md                   # Project documentation
├── 📄 DEPLOYMENT.md               # Deployment guide
└── 📄 PROJECT_STRUCTURE.md        # This file
```

## 📝 File Descriptions

### Core Application Files

#### `app.py` (Main Application)
- Streamlit page configuration
- Session state initialization
- Sidebar configuration rendering
- Main dashboard and tab management
- Auto-rescan logic
- Signal scanning orchestration

**Key Functions:**
- `main()` - Application entry point
- `render_sidebar()` - Sidebar UI
- `render_dashboard()` - Dashboard tab
- `render_signals_tab()` - Signals scanning tab
- `run_market_scan()` - Market scanning logic

---

#### `config.py` (Configuration)
- Application settings and constants
- Default session state values
- Trading configuration parameters
- Risk management settings
- Signal generation thresholds
- ML model hyperparameters
- Chart styling configuration

**Key Constants:**
- `APP_CONFIG` - Page configuration
- `DEFAULT_SESSION_STATE` - Session defaults
- `TRADING_CONFIG` - Trading settings
- `RISK_CONFIG` - Risk parameters
- `SIGNAL_CONFIG` - Signal thresholds
- `ML_CONFIG` - ML hyperparameters

---

### Exchange Module

#### `exchange.py`
Handles all exchange-related operations.

**Key Functions:**
- `get_exchange()` - Initialize exchange connection
- `fetch_ohlcv()` - Fetch candlestick data
- `fetch_orderbook()` - Fetch order book
- `fetch_funding_rate()` - Get funding rates
- `fetch_open_interest()` - Get open interest
- `get_top_volume_pairs()` - Get top pairs by volume
- `fetch_balance()` - Get account balance
- `fetch_positions()` - Get open positions

---

### Analysis Modules

#### `indicators.py`
Calculates all technical indicators and market structure.

**Key Functions:**
- `calculate_indicators()` - Calculate all indicators
- `detect_order_blocks()` - Find order blocks
- `detect_fair_value_gaps()` - Find FVGs
- `detect_market_structure()` - Analyze market structure
- `calculate_volume_profile()` - Volume profile & POC
- `analyze_orderbook_flow()` - Orderbook analysis
- `fibonacci_levels()` - Calculate Fibonacci levels

**Indicators Included:**
- Trend: EMA, SMA, ADX, Ichimoku
- Momentum: RSI, MACD, Stochastic, ROC, CCI, Williams %R
- Volatility: Bollinger Bands, ATR, Keltner Channels
- Volume: CMF, MFI, OBV, Volume Ratio

---

#### `signals.py`
Generates trading signals based on technical analysis.

**Key Functions:**
- `generate_comprehensive_signal()` - Main signal generator
- `analyze_trend()` - Trend analysis scoring
- `analyze_momentum()` - Momentum scoring
- `analyze_volume()` - Volume analysis
- `analyze_market_structure_signal()` - Structure scoring
- `analyze_orderflow()` - Orderflow scoring
- `analyze_ml_signal()` - ML prediction integration
- `create_long_signal()` - Format long signal
- `create_short_signal()` - Format short signal

**Signal Components:**
1. Trend (30% weight)
2. Momentum (25% weight)
3. Volume (20% weight)
4. Market Structure (15% weight)
5. Order Flow (10% weight)
6. ML Predictions (bonus)

---

#### `ml_engine.py`
Machine learning model training and prediction.

**Key Functions:**
- `prepare_ml_features()` - Prepare training data
- `train_ml_model()` - Train Gradient Boosting model
- `predict_with_ml()` - Make predictions
- `get_feature_importance()` - Feature importance

**Model Features:**
- RSI, MACD, Stochastic, BB Width, ATR
- CMF, MFI, ADX, ROC, CCI, Williams %R
- Volume Ratio, EMAs (9, 21, 50)

---

### Trading Modules

#### `trading.py`
Handles trade execution and position management.

**Key Functions:**
- `execute_trade()` - Execute market orders
- `update_trailing_stop()` - Update trailing SL
- `check_daily_loss_limit()` - Risk checks
- `close_position()` - Manual position closing
- `calculate_position_pnl()` - Calculate P&L

**Features:**
- Dynamic position sizing
- Partial take profits (30/30/40)
- Trailing stop loss
- Risk management checks

---

#### `backtest.py`
Strategy backtesting on historical data.

**Key Functions:**
- `backtest_strategy()` - Run backtest simulation
- `calculate_backtest_stats()` - Calculate metrics
- `calculate_max_drawdown()` - Drawdown calculation
- `calculate_sortino_ratio()` - Sortino ratio
- `calculate_calmar_ratio()` - Calmar ratio

**Metrics Calculated:**
- Total trades, Win rate, Profit factor
- Sharpe ratio, Max drawdown
- Average win/loss, Expectancy
- Equity curve, Trade history

---

### Notification & Visualization

#### `notifications.py`
Alert notifications via Telegram and Discord.

**Key Functions:**
- `send_telegram()` - Send Telegram message
- `send_discord()` - Send Discord message
- `format_signal_message()` - Format signal alerts
- `format_trade_execution_message()` - Format trade alerts
- `format_position_closed_message()` - Format close alerts
- `send_signal_notification()` - Send to all channels

---

#### `visualization.py`
Creates interactive charts and visualizations.

**Key Functions:**
- `create_advanced_chart()` - Main trading chart
- `add_signal_markers()` - Add signal lines
- `create_equity_curve_chart()` - Equity curve
- `create_drawdown_chart()` - Drawdown visualization
- `create_monthly_returns_heatmap()` - Monthly performance
- `create_win_loss_chart()` - Win/loss distribution

**Chart Components:**
- Candlestick chart
- EMAs, Bollinger Bands
- RSI, MACD, Volume indicators
- Signal markers (entry, SL, TPs)

---

### Utility Modules

#### `utils.py`
Common helper functions used across the application.

**Key Functions:**
- `init_session_state()` - Initialize session state
- `format_number()` - Number formatting
- `format_percentage()` - Percentage formatting
- `format_currency()` - Currency formatting
- `get_timeframe_minutes()` - Timeframe conversion
- `calculate_time_ago()` - Time difference
- `validate_api_credentials()` - API validation
- `safe_divide()` - Safe division
- `get_risk_level()` - Risk level categorization
- `calculate_position_size()` - Position sizing

---

### Tab Modules

#### `tabs/__init__.py`
Package initialization and exports.

#### `tabs/backtest_tab.py`
Backtesting interface and results display.

**Key Functions:**
- `render_backtest_tab()` - Main tab renderer
- `run_backtest()` - Execute backtest
- `display_backtest_results()` - Show results

**Features:**
- Symbol and timeframe selection
- Performance metrics display
- Equity curve visualization
- Trade history table

---

#### `tabs/portfolio_tab.py`
Portfolio management and position monitoring.

**Key Functions:**
- `render_portfolio_tab()` - Main tab renderer
- `display_balance()` - Show account balance
- `display_positions()` - Show open positions
- `display_trade_history()` - Show trade history

**Features:**
- Real-time balance display
- Active positions monitoring
- Historical trade analysis

---

#### `tabs/analytics_tab.py`
Advanced analytics and ML model management.

**Key Functions:**
- `render_analytics_tab()` - Main tab renderer
- `render_ml_section()` - ML model section
- `train_model()` - Train ML model
- `display_feature_importance()` - Show feature importance
- `render_features_section()` - Feature documentation
- `render_strategy_info()` - Strategy information

**Features:**
- ML model training interface
- Feature importance visualization
- Strategy components explanation
- Risk management documentation

---

## 📦 Dependencies (requirements.txt)

```
streamlit==1.29.0          # Web framework
ccxt==4.1.75              # Exchange connectivity
pandas==2.1.4             # Data manipulation
numpy==1.26.2             # Numerical computing
plotly==5.18.0            # Interactive charts
requests==2.31.0          # HTTP requests
ta==0.11.0                # Technical analysis
scipy==1.11.4             # Scientific computing
scikit-learn==1.3.2       # Machine learning
python-dateutil==2.8.2    # Date utilities
```

## 🔄 Data Flow

```
1. User Input (Sidebar)
   ↓
2. Exchange Connection (exchange.py)
   ↓
3. Data Fetching (OHLCV, Orderbook)
   ↓
4. Indicator Calculation (indicators.py)
   ↓
5. ML Prediction (ml_engine.py) [Optional]
   ↓
6. Signal Generation (signals.py)
   ↓
7. Display Results / Execute Trade
   ↓
8. Notifications (notifications.py)
```

## 🎯 Module Responsibilities

### Core Layer
- **app.py**: UI orchestration, user interaction
- **config.py**: Centralized configuration

### Data Layer
- **exchange.py**: External API communication
- **indicators.py**: Data transformation

### Logic Layer
- **signals.py**: Business logic for trading
- **ml_engine.py**: AI/ML predictions
- **backtest.py**: Historical simulation

### Action Layer
- **trading.py**: Trade execution
- **notifications.py**: User alerts

### Presentation Layer
- **visualization.py**: Data visualization
- **tabs/*.py**: UI components
- **utils.py**: Helper functions

## 🔐 Security Considerations

### ✅ Safe Practices
- API keys entered via UI (not stored in code)
- Session-based credential storage
- Testnet support for testing
- .gitignore for sensitive files

### ⚠️ Important Notes
- Never commit API keys
- Use testnet before live trading
- Implement rate limiting
- Monitor daily loss limits

## 📊 Session State Variables

Stored in `st.session_state`:

```python
{
    'api_key': '',                    # Binance API key
    'api_secret': '',                 # Binance API secret
    'telegram_token': '',             # Telegram bot token
    'telegram_chat_id': '',           # Telegram chat ID
    'discord_webhook': '',            # Discord webhook URL
    'auto_trading_enabled': False,    # Auto-trading status
    'max_positions': 3,               # Max concurrent positions
    'risk_per_trade': 2.0,           # Risk percentage per trade
    'daily_loss_limit': 5.0,         # Daily loss limit
    'use_trailing_stop': True,        # Trailing stop enabled
    'partial_tp': True,               # Partial TP enabled
    'trades_history': [],             # List of completed trades
    'active_positions': [],           # List of open positions
    'total_pnl': 0.0,                # Total profit/loss
    'ml_model': None,                 # Trained ML model
    'scaler': None,                   # Feature scaler
    'backtest_results': None,         # Backtest results
    'last_scan': None,                # Last scan timestamp
    'auto_rescan': False,             # Auto-rescan enabled
    'rescan_interval': 300,           # Rescan interval (seconds)
    'scan_counter': 0,                # Scan counter
    'last_signals': []                # Last found signals
}
```

## 🚀 Deployment Files

### `.gitignore`
Prevents committing sensitive files:
- Python cache files
- Virtual environments
- IDE configurations
- API keys and secrets
- Log files

### `README.md`
Project documentation:
- Features overview
- Installation instructions
- Usage guide
- Risk warnings

### `DEPLOYMENT.md`
Deployment guide:
- Streamlit Cloud deployment
- Alternative platforms
- Troubleshooting
- Security best practices

## 📈 Performance Optimization

### Caching Strategy
```python
# Data caching (60 seconds TTL)
@st.cache_data(ttl=60)
def fetch_ohlcv(...):
    pass

# Resource caching (persistent)
@st.cache_resource
def get_exchange(...):
    pass
```

### Memory Management
- Limit historical data fetching
- Clear old signals periodically
- Optimize ML model size
- Use efficient data structures

### API Rate Limiting
- CCXT rate limiting enabled
- Configurable scan intervals
- Cached data fetching
- Batch requests where possible

## 🧪 Testing Checklist

### Before Deployment
- [ ] All imports work correctly
- [ ] No syntax errors
- [ ] Config values are correct
- [ ] All tabs render properly
- [ ] Charts display correctly
- [ ] ML model trains successfully
- [ ] Signals generate properly
- [ ] Backtesting works
- [ ] API connection works (testnet)

### After Deployment
- [ ] App loads on Streamlit Cloud
- [ ] No module import errors
- [ ] All features functional
- [ ] Notifications work
- [ ] Auto-rescan works
- [ ] Mobile responsive

## 📚 Additional Resources

### Documentation Links
- [Streamlit Docs](https://docs.streamlit.io)
- [CCXT Documentation](https://docs.ccxt.com)
- [Binance API](https://binance-docs.github.io/apidocs/futures/en/)
- [TA-Lib Indicators](https://technical-analysis-library-in-python.readthedocs.io/)

### Related Projects
- CCXT: Cryptocurrency exchange library
- TA: Technical analysis library
- Plotly: Interactive plotting library
- Scikit-learn: Machine learning library

## 🎓 Learning Path

1. **Beginner**: Understand basic indicators
2. **Intermediate**: Learn signal generation logic
3. **Advanced**: Customize ML models
4. **Expert**: Develop custom strategies

## 🔧 Customization Guide

### Adding New Indicators
1. Edit `indicators.py`
2. Add calculation in `calculate_indicators()`
3. Update `signals.py` to use new indicator
4. Update feature list in `ml_engine.py` if needed

### Adding New Strategies
1. Edit `signals.py`
2. Add new analysis function
3. Integrate into `generate_comprehensive_signal()`
4. Update weights and thresholds

### Custom Notifications
1. Edit `notifications.py`
2. Add new notification provider
3. Add configuration in `config.py`
4. Update UI in `app.py` sidebar

---

**🎉 You're Ready to Deploy!**

Follow the DEPLOYMENT.md guide to deploy your bot to Streamlit Cloud.

**Remember**: Always test thoroughly before using real money!
