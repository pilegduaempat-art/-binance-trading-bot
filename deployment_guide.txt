# 🚀 Deployment Guide

Complete guide for deploying the Binance Trading Bot to Streamlit Cloud and other platforms.

## 📋 Prerequisites

- GitHub account
- Streamlit Cloud account (free)
- Git installed locally
- Python 3.8+ installed

## 🌐 Deploy to Streamlit Cloud

### Step 1: Prepare Your Repository

1. **Create a new GitHub repository**
   ```bash
   # Initialize git if not already done
   git init
   
   # Add all files
   git add .
   
   # Commit
   git commit -m "Initial commit: Binance Trading Bot"
   
   # Add remote
   git remote add origin https://github.com/YOUR_USERNAME/binance-trading-bot.git
   
   # Push to GitHub
   git push -u origin main
   ```

2. **Verify all required files are included**
   - ✅ app.py
   - ✅ requirements.txt
   - ✅ All module files (.py)
   - ✅ tabs/ folder with __init__.py
   - ✅ README.md
   - ✅ .gitignore

### Step 2: Deploy on Streamlit Cloud

1. **Go to Streamlit Cloud**
   - Visit: https://share.streamlit.io
   - Sign in with your GitHub account

2. **Create New App**
   - Click "New app" button
   - Select your repository: `binance-trading-bot`
   - Branch: `main`
   - Main file path: `app.py`
   - App URL: `your-app-name` (customize this)

3. **Advanced Settings (Optional)**
   - Python version: `3.9` or `3.10`
   - Click "Deploy!"

### Step 3: Wait for Deployment

- Initial deployment takes 2-5 minutes
- Watch the logs for any errors
- Once complete, your app will be live!

### Step 4: Access Your App

Your app will be available at:
```
https://your-app-name.streamlit.app
```

## 🔐 Security Best Practices

### ⚠️ IMPORTANT: Never Commit API Keys

**DO NOT** store API keys in:
- ❌ Code files
- ❌ Config files
- ❌ Streamlit secrets (for public repos)
- ❌ Environment variables in public repos

**ALWAYS** enter API keys through the UI:
- ✅ Use the sidebar input fields
- ✅ Keys are stored only in browser session
- ✅ Never committed to repository

### Using Streamlit Secrets (Optional - Private Repos Only)

For **private repositories**, you can use Streamlit secrets:

1. Go to your app dashboard on Streamlit Cloud
2. Click "⚙️ Settings"
3. Select "Secrets"
4. Add your secrets in TOML format:

```toml
# Only for private repositories!
[binance]
testnet_api_key = "your_testnet_key"
testnet_api_secret = "your_testnet_secret"

[telegram]
bot_token = "your_telegram_token"
chat_id = "your_chat_id"
```

5. Access in code:
```python
import streamlit as st

# In sidebar, pre-fill from secrets if available
default_key = st.secrets.get("binance", {}).get("testnet_api_key", "")
```

## 🔧 Troubleshooting

### Common Issues

#### 1. Module Not Found Error

**Error**: `ModuleNotFoundError: No module named 'X'`

**Solution**:
- Verify `requirements.txt` includes all dependencies
- Check spelling and versions
- Push updated requirements.txt to GitHub

#### 2. Import Error

**Error**: `ImportError: cannot import name 'X' from 'module'`

**Solution**:
- Ensure all module files are in the repository
- Check `tabs/__init__.py` exists
- Verify Python import paths are correct

#### 3. Memory Limit Exceeded

**Error**: `MemoryError` or app crashes

**Solution**:
- Reduce data fetching limits
- Optimize ML model training
- Use caching (`@st.cache_data`, `@st.cache_resource`)
- Consider upgrading to Streamlit Cloud paid tier

#### 4. Rate Limiting

**Error**: Exchange API rate limit errors

**Solution**:
- Increase `rescan_interval`
- Use caching for data fetching
- Enable `enableRateLimit` in CCXT (already done)

### Viewing Logs

1. Go to Streamlit Cloud dashboard
2. Click on your app
3. Click "Manage app"
4. View logs in real-time

### Restarting the App

1. Go to app dashboard
2. Click "⋮" menu
3. Select "Reboot app"

## 📊 Monitoring

### Check App Health

- Monitor logs regularly
- Check error messages
- Review trading performance
- Monitor API usage

### Performance Optimization

1. **Caching**
   ```python
   @st.cache_data(ttl=60)  # Cache for 60 seconds
   def fetch_data():
       pass
   ```

2. **Reduce Data Calls**
   - Use appropriate timeframes
   - Limit number of pairs scanned
   - Implement smart refresh logic

3. **Optimize ML Training**
   - Train less frequently
   - Use smaller datasets if needed
   - Cache trained models

## 🔄 Updating Your App

### Method 1: Git Push (Automatic)

```bash
# Make changes locally
git add .
git commit -m "Update: description of changes"
git push origin main

# Streamlit Cloud auto-deploys from main branch
```

### Method 2: Manual Reboot

1. Go to Streamlit Cloud dashboard
2. Select your app
3. Click "Reboot app"

## 🌟 Alternative Deployment Options

### Deploy to Heroku

1. Create `Procfile`:
   ```
   web: streamlit run app.py --server.port=$PORT
   ```

2. Create `runtime.txt`:
   ```
   python-3.9.16
   ```

3. Deploy:
   ```bash
   heroku create your-app-name
   git push heroku main
   ```

### Deploy to AWS EC2

1. Launch EC2 instance (Ubuntu)
2. Install dependencies:
   ```bash
   sudo apt update
   sudo apt install python3-pip
   pip3 install -r requirements.txt
   ```

3. Run with screen:
   ```bash
   screen -S trading-bot
   streamlit run app.py --server.port=8501
   # Detach: Ctrl+A, then D
   ```

### Deploy to Docker

1. Create `Dockerfile`:
   ```dockerfile
   FROM python:3.9-slim
   
   WORKDIR /app
   COPY requirements.txt .
   RUN pip install -r requirements.txt
   
   COPY . .
   
   EXPOSE 8501
   CMD ["streamlit", "run", "app.py"]
   ```

2. Build and run:
   ```bash
   docker build -t trading-bot .
   docker run -p 8501:8501 trading-bot
   ```

## 📱 Mobile Access

Your Streamlit app is mobile-responsive and can be accessed from:
- 📱 iOS Safari
- 📱 Android Chrome
- 💻 Desktop browsers

Bookmark the app URL for quick access!

## 🆘 Support

If you encounter issues:

1. Check the [GitHub Issues](https://github.com/YOUR_USERNAME/binance-trading-bot/issues)
2. Review Streamlit Cloud logs
3. Test locally first: `streamlit run app.py`
4. Create a new issue with:
   - Error message
   - Steps to reproduce
   - Screenshots if applicable

## ✅ Post-Deployment Checklist

- [ ] App loads without errors
- [ ] API connection works (testnet)
- [ ] Indicators calculate correctly
- [ ] Signals generate properly
- [ ] Charts display correctly
- [ ] ML model trains successfully
- [ ] Notifications work (if configured)
- [ ] Backtesting runs smoothly
- [ ] Portfolio displays correctly

---

**Ready to Trade!** 🚀

Remember: Always start with testnet and small amounts. Never risk more than you can afford to lose.
